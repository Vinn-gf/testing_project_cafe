# Import library yang dibutuhkan
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler

# Load dataset
df = pd.read_csv("Dataset Kafe.csv", delimiter=";", header=None)
df.columns = ["nomor", "nama kafe", "alamat", "link google maps", "latitude", "longitude", "desain", "fasilitas", "kisaran harga makanan", "kisaran harga minuman", "rating"] # Add column names assuming these are your columns

# Tampilkan 5 data awal
print("Data awal:")
print(df.head())

# --- Membuat Dummy User dan Rating ---
# Tentukan jumlah dummy user yang ingin dibuat
num_users = 5  

# Buat DataFrame kosong untuk user-item matrix
user_item_matrix = pd.DataFrame(index=[f'User{i}' for i in range(1, num_users + 1)], columns=df['nama kafe'].unique())

# Isi matrix dengan rating dummy (misalnya, rating acak antara 1 sampai 5)
import random
for user in user_item_matrix.index:
    for kafe in user_item_matrix.columns:
        user_item_matrix.loc[user, kafe] = random.randint(1, 5) 

print("\nUser-Item Matrix (Dummy):")
print(user_item_matrix)

# --- Sisa kode ---
# Gantilah nilai NaN dengan 0 untuk perhitungan similarity
matrix_filled = user_item_matrix.fillna(0)

# Hitung cosine similarity antar user
user_similarity = cosine_similarity(matrix_filled)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

print("\nUser Similarity Matrix:")
print(user_similarity_df)

# Fungsi untuk memberikan rekomendasi berdasarkan user-based CF
def recommend_items(user_id, user_item_matrix, similarity_matrix, top_n=3):
    if user_id not in user_item_matrix.index:
        return "User tidak ditemukan dalam data."

    user_ratings = user_item_matrix.loc[user_id]
    unrated_items = user_ratings[user_ratings.isna()].index.tolist()
    
    pred_ratings = {}

    for item in unrated_items:
        total_sim = 0
        weighted_sum = 0
        for other_user in user_item_matrix.index:
            if other_user != user_id and not pd.isna(user_item_matrix.loc[other_user, item]):
                sim = similarity_matrix.loc[user_id, other_user]
                total_sim += abs(sim)
                weighted_sum += sim * user_item_matrix.loc[other_user, item]
        
        if total_sim > 0:
            pred_ratings[item] = weighted_sum / total_sim

    # Urutkan berdasarkan prediksi tertinggi
    sorted_predictions = sorted(pred_ratings.items(), key=lambda x: x[1], reverse=True)

    return sorted_predictions[:top_n]

# Contoh rekomendasi untuk user_id yang ada di dataset
user_id = 'User1'  # Ganti dengan ID dummy user yang ingin Anda rekomendasikan
recommendations = recommend_items(user_id, user_item_matrix, user_similarity_df)

print(f"\nRekomendasi untuk User {user_id}:")
# Check if recommendations is a string (user not found) or a list of tuples
if isinstance(recommendations, str):
    print(recommendations)  # Print the "user not found" message
else:
    for kafe, pred in recommendations:
        print(f"{kafe} â†’ Prediksi Rating: {pred:.2f}")